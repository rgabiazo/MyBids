from pathlib import Path

import nibabel as nib
import numpy as np
import pytest
from click.testing import CliRunner

from bidscomatic.cli import main as cli_main
from bidscomatic.utils import fsl

from .utils import fake_run_factory, make_dataset


def _motion(root: Path, base: str) -> Path:
    """Build the expected MCFLIRT motion TSV path.

    Args:
        root: Dataset root produced by the test fixture.
        base: File name stem for the motion output.

    Returns:
        Path to the motion parameters file generated by MCFLIRT.
    """
    return root / "MCFLIRT" / "sub-001" / "ses-01" / "func" / f"{base}_desc-mcflirt_motion.tsv"


def test_cli_fsl_mcflirt(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))

    runner = CliRunner()
    result = runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])
    assert result.exit_code == 0, result.output
    base = "sub-001_ses-01_task-test"
    assert _motion(tmp_path, base).exists()
    assert "Subject:            sub-001" in result.output
    assert "Session:            ses-01" in result.output
    assert "Dir/Phase:          n/a" in result.output


def test_cli_fsl_mcflirt_skip_existing(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT skip existing behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    fake = fake_run_factory(calls)
    monkeypatch.setattr(fsl, "run_cmd", fake)

    runner = CliRunner()
    runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])

    calls.clear()
    result = runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])
    assert "skip existing" in result.output
    assert calls == []

    calls.clear()
    result_force = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--force"],
    )
    assert result_force.exit_code == 0
    assert calls  # mcflirt reran


def test_cli_fsl_mcflirt_no_session(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT NO session behavior."""
    bold = make_dataset(tmp_path, with_session=False)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    result = runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])
    assert result.exit_code == 0
    assert "Session:            n/a" in result.output


def test_cli_fsl_mcflirt_bad_size(tmp_path):
    """Verify CLI FSL MCFLIRT BAD size behavior."""
    bold = make_dataset(tmp_path)
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--size", "800"],
    )
    assert result.exit_code != 0
    assert "WIDTHxHEIGHT" in result.output


def test_cli_fsl_mcflirt_only_plot_missing(tmp_path):
    """Verify CLI FSL MCFLIRT only plot missing behavior."""
    bold = make_dataset(tmp_path)
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--only-plot"],
    )
    assert result.exit_code != 0
    assert "missing motion files" in result.output.lower()


def test_cli_fsl_mcflirt_multi_run_base_out(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT multi RUN base OUT behavior."""
    bold1 = make_dataset(tmp_path, run="01")
    bold2 = make_dataset(tmp_path, run="02")
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    base = tmp_path / "base_qc"
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold1.parent), "--out", str(base)],
    )
    assert result.exit_code == 0, result.output
    base1 = base / "MCFLIRT" / "sub-001" / "ses-01" / "func" / "sub-001_ses-01_task-test_run-01_desc-mcflirt_motion.tsv"
    base2 = base / "MCFLIRT" / "sub-001" / "ses-01" / "func" / "sub-001_ses-01_task-test_run-02_desc-mcflirt_motion.tsv"
    assert base1.exists()
    assert base2.exists()
    assert len([c for c in calls if c[0] == "mcflirt"]) == 2


def test_cli_fsl_mcflirt_context_run_dir(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT context RUN DIR behavior."""
    bold = make_dataset(tmp_path, run="01", direction="AP")
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    result = runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])
    assert result.exit_code == 0, result.output
    assert "Run:                run-01" in result.output
    assert "Dir/Phase:          dir-AP" in result.output


def test_cli_fsl_mcflirt_pattern_option(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT pattern option behavior."""
    bold1 = make_dataset(tmp_path, run="01")
    bold2 = make_dataset(tmp_path, run="02")
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    pattern = "*run-02*_bold.nii.gz"
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold1.parent), "--pattern", pattern],
    )
    assert result.exit_code == 0, result.output
    base1 = "sub-001_ses-01_task-test_run-01"
    base2 = "sub-001_ses-01_task-test_run-02"
    assert not _motion(tmp_path, base1).exists()
    assert _motion(tmp_path, base2).exists()
    assert len([c for c in calls if c[0] == "mcflirt"]) == 1


def test_cli_fsl_mcflirt_pattern_missing(tmp_path):
    """Verify CLI FSL MCFLIRT pattern missing behavior."""
    bold = make_dataset(tmp_path, boldref=True)
    bold.unlink()
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold.parent), "--pattern", "nomatch*"],
    )
    assert result.exit_code != 0
    assert "No matching files" in str(result.exception)


def test_cli_fsl_mcflirt_input_flag(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT input flag behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    result = runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", "--input", str(bold)])
    assert result.exit_code == 0, result.output


def test_cli_fsl_mcflirt_ref_external(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT REF external behavior."""
    bold = make_dataset(tmp_path)
    ref_img = nib.Nifti1Image(np.zeros((2, 2, 2), dtype="float32"), np.eye(4))
    ref_file = tmp_path / "ref.nii.gz"
    ref_img.to_filename(ref_file)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--ref", str(ref_file)],
    )
    assert result.exit_code == 0, result.output


def test_cli_fsl_mcflirt_ref_missing(tmp_path):
    """Verify CLI FSL MCFLIRT REF missing behavior."""
    bold = make_dataset(tmp_path)
    missing = tmp_path / "missing.nii.gz"
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--ref", str(missing)],
    )
    assert result.exit_code != 0
    assert "No such file" in str(result.exception)


def test_cli_fsl_mcflirt_only_plot_success(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT only plot success behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    fake = fake_run_factory(calls)
    monkeypatch.setattr(fsl, "run_cmd", fake)
    runner = CliRunner()
    runner.invoke(cli_main, ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold)])
    deriv_fig = tmp_path / "MCFLIRT" / "figures" / "sub-001"
    for plot in ("rot", "trans", "displacement"):
        (deriv_fig / f"sub-001_ses-01_task-test_desc-{plot}_timeseries.png").unlink()
    calls.clear()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--only-plot"],
    )
    assert result.exit_code == 0, result.output
    assert len([c for c in calls if c[0] == "fsl_tsplot"]) == 3


def test_cli_fsl_mcflirt_keep_nifti(tmp_path, monkeypatch):
    """Verify CLI FSL MCFLIRT keep nifti behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    runner = CliRunner()
    result = runner.invoke(
        cli_main,
        ["--bids-root", str(tmp_path), "fsl", "mcflirt", str(bold), "--keep-nifti"],
    )
    assert result.exit_code == 0, result.output
    logs_dir = tmp_path / "MCFLIRT" / "logs" / "sub-001" / "ses-01"
    assert (logs_dir / "prefiltered_func_data.nii.gz").exists()
    assert (logs_dir / "prefiltered_func_data_mcf.nii.gz").exists()
    assert (logs_dir / "example_func.nii.gz").exists()


