from pathlib import Path

import nibabel as nib
import numpy as np
import pytest

from bidscomatic.pipelines import mcflirt as mcflirt_pipeline
from bidscomatic.utils import fsl

from .utils import fake_run_factory, make_dataset


def _motion_tsv(root: Path, base: str) -> Path:
    """Build the expected MCFLIRT motion TSV path.

    Args:
        root: Dataset root produced by the test fixture.
        base: File name stem for the motion output.

    Returns:
        Path to the motion parameters file generated by MCFLIRT.
    """
    return root / "MCFLIRT" / "sub-001" / "ses-01" / "func" / f"{base}_desc-mcflirt_motion.tsv"


def test_default_output_structure(tmp_path, monkeypatch):
    """Verify default output structure behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    mcflirt_pipeline.run(bold)
    deriv = tmp_path / "MCFLIRT"
    assert (deriv / "dataset_description.json").exists()
    base = "sub-001_ses-01_task-test"
    motion = _motion_tsv(tmp_path, base)
    assert motion.exists()
    assert motion.with_suffix(".json").exists()
    figs = deriv / "figures" / "sub-001"
    assert (figs / f"{base}_desc-rot_timeseries.png").exists()
    logs = deriv / "logs" / "sub-001" / "ses-01"
    assert (logs / f"{base}_desc-mcflirt.par").exists()


@pytest.mark.parametrize("ref", ["first", "mean", "vol=1"])
def test_ref_modes(tmp_path, monkeypatch, ref):
    """Verify REF modes behavior."""
    bold = make_dataset(tmp_path)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    mcflirt_pipeline.run(bold, ref=ref)
    base = "sub-001_ses-01_task-test"
    assert _motion_tsv(tmp_path, base).exists()


def test_multi_run(tmp_path, monkeypatch):
    """Verify multi RUN behavior."""
    bold1 = make_dataset(tmp_path, run="01")
    bold2 = make_dataset(tmp_path, run="02")
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    mcflirt_pipeline.run(bold1.parent)
    base1 = "sub-001_ses-01_task-test_run-01"
    base2 = "sub-001_ses-01_task-test_run-02"
    assert _motion_tsv(tmp_path, base1).exists()
    assert _motion_tsv(tmp_path, base2).exists()


def test_rejects_3d_image(tmp_path, monkeypatch):
    """Verify rejects 3d image behavior."""
    (tmp_path / "dataset_description.json").write_text("{}")
    func = tmp_path / "sub-001" / "func"
    func.mkdir(parents=True)
    img = nib.Nifti1Image(np.zeros((2, 2, 2), dtype="float32"), np.eye(4))
    bold = func / "sub-001_task-test_bold.nii.gz"
    img.to_filename(bold)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    with pytest.raises(click.ClickException):
        mcflirt_pipeline.run(bold)


def test_rejects_single_volume(tmp_path, monkeypatch):
    """Verify rejects single volume behavior."""
    bold = make_dataset(tmp_path, n_vols=1)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    with pytest.raises(click.ClickException):
        mcflirt_pipeline.run(bold)


def test_excludes_boldref(tmp_path, monkeypatch):
    """Verify excludes boldref behavior."""
    bold = make_dataset(tmp_path, boldref=True)
    calls: list[list[str]] = []
    monkeypatch.setattr(fsl, "run_cmd", fake_run_factory(calls))
    mcflirt_pipeline.run(bold.parent)
    base = "sub-001_ses-01_task-test"
    assert _motion_tsv(tmp_path, base).exists()
    assert len([c for c in calls if c[0] == "mcflirt"]) == 1


import click  # placed at end to avoid unused-import flake

