"""Example events configuration replicating the assocmemory CLI invocation."""

version: 1
command: events
task: assocmemory

input:
  root: sourcedata/behavioural_task
  pattern: "*MemoryTask*.csv"
  subjects: []
  sessions: []

ingest:
  img_col: image_file
  accuracy_col: is_correct
  trialtype_col:
  durations:
    trial: 3.0
  onset_groups:
    - onset_cols:
        - encodeTrialRun1_Image.started
        - recogTrialRun1_Image.started
        - encodeTrialRun2_Image.started
        - recogTrialRun2_Image.started
        - encodeTrialRun3_Image.started
        - recogTrialRun3_Image.started
      duration: 3.0
  rt_cols:
    - encodeTrialTestKeyRespRun1.rt
    - recogTrialTestKeyRespRun1.rt
    - encodeTrialTestKeyRespRun2.rt
    - recogTrialTestKeyRespRun2.rt
    - encodeTrialTestKeyRespRun3.rt
    - recogTrialTestKeyRespRun3.rt
  trialtype_patterns:
    Pair_Encoding: encoding_pair
    Face_Encoding: encoding_face
    Place_Encoding: encoding_place
    Pair_Recog: recog_pair
    Face_Recog: recog_face
    Place_Recog: recog_place

derive:
  regex_map:
    - newcol: phase
      from: trial_type
      map:
        encoding: "^(?:enc|encoding)_"
        recognition: "^(?:rec|ret|recogn)[a-z]*_"
        instruction: "^instruction"
    - newcol: acc_label
      from: response
      map:
        hit: "(?i)^\s*hit\s*$"
        miss: "(?i)^\s*miss\s*$"
        correct_rejection: "(?i)^\s*correct\s*rej(ect(ion)?s?)?\.?\s*$"
        false_alarm: "(?i)^\s*false\s*alarm\s*$"
        no_response: "(?i)^\s*no\s*response\s*$"
  regex_extract:
    - newcol: condition
      from: trial_type
      pattern: "_([A-Za-z0-9]+)$"
      group: 0
      apply_to: 'phase!="instruction"'
  id_from:
    - newcol: stim_id
      from: stim_file
      func: basename
  synth_rows:
    - when: block-start
      groupby: [phase, condition]
      onset: first.onset-10
      duration: 10.0
      clamp_zero: true
      set:
        trial_type: 'fmt("instruction_{condition}_{phase}")'
        phase: instruction
        condition: '{condition}'
        is_instruction: 1
        is_error: 0
        acc_label: ""
        stim_id: n/a
        probe_type: n/a
        enc_is_tested: 0
        enc_later_outcome: n/a
  joins:
    membership:
      newcol: probe_type
      keys: [condition, stim_id]
      exists_in: 'phase=="encoding"'
      apply_to: 'phase=="recognition"'
      true_value: target
      false_value: lure
    value:
      newcol: enc_later_outcome
      value_from: acc_label
      keys: [condition, stim_id]
      from_rows: 'phase=="recognition"'
      to_rows: 'phase=="encoding"'
      default: not_tested
    exists_to_flag:
      newcol: enc_is_tested
      keys: [condition, stim_id]
      from_rows: 'phase=="recognition"'
      to_rows: 'phase=="encoding"'
      true: 1
      false: 0
  indices:
    - newcol: trial_n
      groupby: [phase, condition]
      orderby: onset
      start: 1
  set_after_indices:
    - when: 'acc_label==""'
      set:
        acc_label: n/a
    - when: 'phase=="instruction"'
      set:
        trial_n: n/a
  map_values:
    - newcol: block_n
      from: phase
      map:
        encoding: 1
        recognition: 2
        instruction: n/a
    - newcol: class_label
      from: probe_type
      map:
        target: old
        lure: new
  flags:
    - newcol: is_error
      expr: '((phase=="recognition") & ((acc_label=="miss") | (acc_label=="false_alarm") | (acc_label=="no_response"))) | ((phase=="encoding") & (enc_later_outcome=="miss"))'
      true: 1
      false: 0
    - newcol: analysis_include
      expr: '(phase=="recognition") & ((acc_label=="hit") | (acc_label=="correct_rejection"))'
      true: 1
      false: 0
  optional:
    novelty:
      enabled: true
      regex_extract:
        newcol: novelty_type
        from: stim_id
        pattern: '_(OLD|NEW)(?=[.]|$)'
        group: 0
        casefold: true
        default: ""
      map_values:
        newcol: novelty_type
        from: novelty_type
        map:
          old: old
          new: novel

output:
  keep_cols:
    - trial_type
    - stim_file
    - response_time
    - response
  keep_cols_if_exist:
    - onset
    - duration
    - trial_type
    - stim_file
    - response_time
    - response
    - phase
    - condition
    - stim_id
    - acc_label
    - probe_type
    - enc_is_tested
    - enc_later_outcome
    - is_instruction
    - is_error
    - block_n
    - trial_n
    - class_label
    - novelty_type
    - analysis_include
  create_stimuli_directory: true
  create_events_json: true
  sidecar:
    field_descriptions:
      onset: "Start time of the event measured from the beginning of the run."
      duration: "Duration of the event."
      trial_type: "Experimental condition label for each trial."
      stim_file: "Relative path (from the dataset root) to the bitmap shown on that trial. Paths should begin with 'stimuli/'."
      response_time: "Latency between stimulus onset and the participantâ€™s button press."
      response: "Behavioural accuracy category for the recognition trial."
      phase: "Stage parsed from trial_type (encoding/recognition/instruction)."
      condition: "Condition parsed from trial_type (e.g., face/place/pair)."
      stim_id: "Basename of stim_file; used as join key across phases."
      acc_label: "Normalized behavioural outcome (hit/miss/correct_rejection/false_alarm/no_response); blank on encoding."
      probe_type: "For recognition, target if a matching encoding instance exists in the run; else lure."
      enc_is_tested: "For encoding trials, whether a recognition probe occurred for this item in the run (0/1)."
      enc_later_outcome: "For encoding trials, the recognition outcome for the same item, or not_tested."
      is_instruction: "Instruction row placed at each (phase,condition) block start (10 s before first trial)."
      is_error: "Incorrect/missed recognition or encoding item later missed (0/1)."
      block_n: "Within-run block index: encoding=1, recognition=2, instruction=n/a."
      trial_n: "Within (phase,condition), 1-based trial index ordered by onset; blank on instruction."
      class_label: "MVPA convenience label: old for target, new for lure."
      novelty_type: "If inferable from filename, old vs novel probe."
      analysis_include: "Mask flag for correct trials (hit/correct_rejection) (0/1)."
    field_units:
      response_time: seconds
    field_levels:
      probe_type:
        target: "Old (studied) item"
        lure: "New (unstudied) item"
      acc_label:
        hit: "Correct old"
        miss: "Missed old"
        correct_rejection: "Correct new"
        false_alarm: "Incorrect old"
        no_response: "No keypress"
