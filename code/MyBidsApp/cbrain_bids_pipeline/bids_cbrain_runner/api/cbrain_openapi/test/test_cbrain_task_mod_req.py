# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform

    The version of the OpenAPI document: 6.2.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cbrain_task_mod_req import CbrainTaskModReq

class TestCbrainTaskModReq(unittest.TestCase):
    """CbrainTaskModReq unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CbrainTaskModReq:
        """Test CbrainTaskModReq
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CbrainTaskModReq`
        """
        model = CbrainTaskModReq()
        if include_optional:
            return CbrainTaskModReq(
                cbrain_task = openapi_client.models.cbrain_task.CbrainTask(
                    id = 56, 
                    type = '', 
                    user_id = 56, 
                    group_id = 56, 
                    bourreau_id = 56, 
                    tool_config_id = 56, 
                    batch_id = 56, 
                    params = openapi_client.models.params.params(), 
                    status = '', 
                    created_at = '', 
                    updated_at = '', 
                    run_number = 56, 
                    results_data_provider_id = 56, 
                    cluster_workdir_size = 56, 
                    workdir_archived = '', 
                    workdir_archive_userfile_id = 56, 
                    description = '', )
            )
        else:
            return CbrainTaskModReq(
        )
        """

    def testCbrainTaskModReq(self):
        """Test CbrainTaskModReq"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
