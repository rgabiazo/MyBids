# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform

    The version of the OpenAPI document: 6.2.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.userfile import Userfile
from typing import Optional, Set
from typing_extensions import Self

class RegistrationInfo(BaseModel):
    """
    RegistrationInfo
    """ # noqa: E501
    notice: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    newly_registered_userfiles: Optional[List[Userfile]] = None
    previously_registered_userfiles: Optional[List[Userfile]] = None
    userfiles_in_transit: Optional[List[Userfile]] = None
    num_unregistered: Optional[StrictInt] = None
    num_erased: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["notice", "error", "newly_registered_userfiles", "previously_registered_userfiles", "userfiles_in_transit", "num_unregistered", "num_erased"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegistrationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in newly_registered_userfiles (list)
        _items = []
        if self.newly_registered_userfiles:
            for _item_newly_registered_userfiles in self.newly_registered_userfiles:
                if _item_newly_registered_userfiles:
                    _items.append(_item_newly_registered_userfiles.to_dict())
            _dict['newly_registered_userfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in previously_registered_userfiles (list)
        _items = []
        if self.previously_registered_userfiles:
            for _item_previously_registered_userfiles in self.previously_registered_userfiles:
                if _item_previously_registered_userfiles:
                    _items.append(_item_previously_registered_userfiles.to_dict())
            _dict['previously_registered_userfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in userfiles_in_transit (list)
        _items = []
        if self.userfiles_in_transit:
            for _item_userfiles_in_transit in self.userfiles_in_transit:
                if _item_userfiles_in_transit:
                    _items.append(_item_userfiles_in_transit.to_dict())
            _dict['userfiles_in_transit'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegistrationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "notice": obj.get("notice"),
            "error": obj.get("error"),
            "newly_registered_userfiles": [Userfile.from_dict(_item) for _item in obj["newly_registered_userfiles"]] if obj.get("newly_registered_userfiles") is not None else None,
            "previously_registered_userfiles": [Userfile.from_dict(_item) for _item in obj["previously_registered_userfiles"]] if obj.get("previously_registered_userfiles") is not None else None,
            "userfiles_in_transit": [Userfile.from_dict(_item) for _item in obj["userfiles_in_transit"]] if obj.get("userfiles_in_transit") is not None else None,
            "num_unregistered": obj.get("num_unregistered"),
            "num_erased": obj.get("num_erased")
        })
        return _obj


