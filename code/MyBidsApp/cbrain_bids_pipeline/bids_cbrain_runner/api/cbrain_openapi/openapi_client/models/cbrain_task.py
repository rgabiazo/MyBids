# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform

    The version of the OpenAPI document: 6.2.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CbrainTask(BaseModel):
    """
    CbrainTask
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the Task.")
    type: Optional[StrictStr] = Field(default=None, description="The task type")
    user_id: Optional[StrictInt] = Field(default=None, description="ID of the User who created the Task.")
    group_id: Optional[StrictInt] = Field(default=None, description="ID of the group that this task is being run in.")
    bourreau_id: Optional[StrictInt] = Field(default=None, description="ID of the Bourreau the Task was launched on.")
    tool_config_id: Optional[StrictInt] = Field(default=None, description="ID number that specifies which Tool Config to use. The Tool Config specifies environment variables and other system-specific scripts necessary for the Task to be run in the target environment.")
    batch_id: Optional[StrictInt] = Field(default=None, description="ID of the batch this task was launched as part of. Batches of tasks consist of the same task, with the same parameters, being run on many different input files.")
    params: Optional[Dict[str, Any]] = Field(default=None, description="Parameters used as inputs to the scientific calculation associated with the task.")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the task.")
    created_at: Optional[StrictStr] = Field(default=None, description="Date created.")
    updated_at: Optional[StrictStr] = Field(default=None, description="Last updated.")
    run_number: Optional[StrictInt] = Field(default=None, description="The number of times that this task was run.")
    results_data_provider_id: Optional[StrictInt] = Field(default=None, description="ID of the Data Provider that contains the Userfile that represents the results of the task.")
    cluster_workdir_size: Optional[StrictInt] = Field(default=None, description="size of workdirectory")
    workdir_archived: Optional[StrictStr] = Field(default=None, description="Boolean variable that indicates whether the working directory of the task is available on the processing server or has been archived and is no longer accessible.")
    workdir_archive_userfile_id: Optional[StrictInt] = Field(default=None, description="ID of the userfile created as part of the archival process, if the working directory of the task has been archived.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Task.")
    __properties: ClassVar[List[str]] = ["id", "type", "user_id", "group_id", "bourreau_id", "tool_config_id", "batch_id", "params", "status", "created_at", "updated_at", "run_number", "results_data_provider_id", "cluster_workdir_size", "workdir_archived", "workdir_archive_userfile_id", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CbrainTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CbrainTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "user_id": obj.get("user_id"),
            "group_id": obj.get("group_id"),
            "bourreau_id": obj.get("bourreau_id"),
            "tool_config_id": obj.get("tool_config_id"),
            "batch_id": obj.get("batch_id"),
            "params": obj.get("params"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "run_number": obj.get("run_number"),
            "results_data_provider_id": obj.get("results_data_provider_id"),
            "cluster_workdir_size": obj.get("cluster_workdir_size"),
            "workdir_archived": obj.get("workdir_archived"),
            "workdir_archive_userfile_id": obj.get("workdir_archive_userfile_id"),
            "description": obj.get("description")
        })
        return _obj


