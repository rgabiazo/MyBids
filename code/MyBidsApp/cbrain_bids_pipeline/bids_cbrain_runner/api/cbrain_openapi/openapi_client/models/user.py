# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform

    The version of the OpenAPI document: 6.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique numerical ID for the user.")
    login: Optional[StrictStr] = Field(default=None, description="UNIX-style username.")
    password: Optional[SecretStr] = Field(default=None, description="Password field")
    password_confirmation: Optional[SecretStr] = Field(default=None, description="Password field (generally same as 'password')")
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the user.")
    email: Optional[StrictStr] = Field(default=None, description="email address of the user.")
    city: Optional[StrictStr] = Field(default=None, description="city where the user is located")
    country: Optional[StrictStr] = Field(default=None, description="country where the user is located")
    time_zone: Optional[StrictStr] = Field(default=None, description="time-zone (should make it this an enum)")
    type: Optional[StrictStr] = Field(default='NormalUser', description="Classification of user permission level")
    site_id: Optional[StrictInt] = Field(default=None, description="ID of the site affiliation for the user.")
    last_connected_at: Optional[StrictStr] = Field(default=None, description="time of last connection by the user. (can be empty)")
    account_locked: Optional[StrictStr] = Field(default=None, description="Whether or not the account is locked.")
    __properties: ClassVar[List[str]] = ["id", "login", "password", "password_confirmation", "full_name", "email", "city", "country", "time_zone", "type", "site_id", "last_connected_at", "account_locked"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "login": obj.get("login"),
            "password": obj.get("password"),
            "password_confirmation": obj.get("password_confirmation"),
            "full_name": obj.get("full_name"),
            "email": obj.get("email"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "time_zone": obj.get("time_zone"),
            "type": obj.get("type") if obj.get("type") is not None else 'NormalUser',
            "site_id": obj.get("site_id"),
            "last_connected_at": obj.get("last_connected_at"),
            "account_locked": obj.get("account_locked")
        })
        return _obj


