# coding: utf-8

"""
    CBRAIN API

    API for interacting with the CBRAIN Platform

    The version of the OpenAPI document: 6.2.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Userfile(BaseModel):
    """
    Userfile
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="ID number of the file.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the file that the Userfile represents")
    size: Optional[StrictInt] = Field(default=None, description="Number of bytes used to store the file.")
    user_id: Optional[StrictInt] = Field(default=None, description="ID of the owner of the file.")
    parent_id: Optional[StrictInt] = Field(default=None, description="ID of the parent Userfile, if any exists, or null otherwise.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the file. This is important in determining what tools can be run on the file. The most generic file types, are the Single File, which represents one file, and the File Collection, which represents a directory full of files.")
    group_id: Optional[StrictInt] = Field(default=None, description="ID of the group that owns the file, which determines its visibility status.")
    data_provider_id: Optional[StrictInt] = Field(default=None, description="ID of the Data Provider that is hosting the persistent copy of the file. It may exist in caches across the systems that make up CBRAIN, as copies of the file are made in order to run scientific programs on them on remote systems.")
    group_writable: Optional[StrictStr] = Field(default=None, description="Boolean variable that specifies whether members of the owner group have access to modify or overwrite the file.")
    num_files: Optional[StrictInt] = Field(default=None, description="Number of files that the Userfiles represents. For Single Files, this is always 1.")
    hidden: Optional[StrictStr] = Field(default=None, description="Boolean variable that specifies whether this file is hidden or not in the user interface.")
    immutable: Optional[StrictStr] = Field(default=None, description="Boolean variable that specifies whether any user can modify the contents of the file.")
    archived: Optional[StrictStr] = Field(default=None, description="Boolean variable that specifies whether the file is available, uncompressed, or has been archived.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the file.")
    __properties: ClassVar[List[str]] = ["id", "name", "size", "user_id", "parent_id", "type", "group_id", "data_provider_id", "group_writable", "num_files", "hidden", "immutable", "archived", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Userfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Userfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "user_id": obj.get("user_id"),
            "parent_id": obj.get("parent_id"),
            "type": obj.get("type"),
            "group_id": obj.get("group_id"),
            "data_provider_id": obj.get("data_provider_id"),
            "group_writable": obj.get("group_writable"),
            "num_files": obj.get("num_files"),
            "hidden": obj.get("hidden"),
            "immutable": obj.get("immutable"),
            "archived": obj.get("archived"),
            "description": obj.get("description")
        })
        return _obj


